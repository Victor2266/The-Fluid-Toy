//Couldn't show that this compute shader was faster than original one
#pragma kernel ExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
#pragma kernel UpdatePositions

// Includes
#include "./FluidMaths2D.hlsl"
#include "./SpatialHash.hlsl"

static const int NumThreads = 64;

struct Circle //12 bytes total
{
    float2 pos; //8 bytes
    float radius; //4 bytes
};

struct OrientedBox //24 bytes total
{
    float2 pos; //8 bytes
    float2 size;
    float2 zLocal;
};

// Buffers
RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float2> PredictedPositions;
RWStructuredBuffer<float2> Velocities;
RWStructuredBuffer<float2> Densities; // Density, Near Density
RWStructuredBuffer<uint3> SpatialIndices; // used for spatial hashing
RWStructuredBuffer<uint> SpatialOffsets; // used for spatial hashing
RWStructuredBuffer<OrientedBox> BoxColliders;
RWStructuredBuffer<Circle> CircleColliders;

// Settings
const uint numParticles;
const float gravity;
const float deltaTime;
const float collisionDamping;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const float nearPressureMultiplier;
const float viscosityStrength;
const float2 boundsSize;
const float2 interactionInputPoint;
const float interactionInputStrength;
const float interactionInputRadius;

int numBoxColliders;
int numCircleColliders;

// --- Optimized Kernel Functions ---
float DensityKernel(float dst, float radius)
{
    // Consider precalculating some values if radius is constant
    return SpikyKernelPow2(dst, radius);
}

float NearDensityKernel(float dst, float radius)
{
    // Consider precalculating some values if radius is constant
    return SpikyKernelPow3(dst, radius);
}

float DensityDerivative(float dst, float radius)
{
    // Consider precalculating some values if radius is constant
    return DerivativeSpikyPow2(dst, radius);
}

float NearDensityDerivative(float dst, float radius)
{
    // Consider precalculating some values if radius is constant
    return DerivativeSpikyPow3(dst, radius);
}

float ViscosityKernel(float dst, float radius)
{
    // Consider precalculating some values if radius is constant
    return SmoothingKernelPoly6(dst, smoothingRadius);
}

// --- Optimized CalculateDensity ---
float2 CalculateDensity(float2 pos)
{
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float density = 0;
    float nearDensity = 0;

    // Neighbour search with unrolling and early exits
    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        for (; currIndex < numParticles; currIndex++)
        {
            uint3 indexData = SpatialIndices[currIndex];

            // Combine conditions for fewer branches
            if (indexData[2] != key || indexData[1] != hash)
            {
                if (indexData[2] != key) break; // Exit outer loop early
                continue;
            }

            uint neighbourIndex = indexData[0];
            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            // Skip if not within radius
            if (sqrDstToNeighbour > sqrRadius) continue;

            // Calculate density and near density
            float dst = sqrt(sqrDstToNeighbour);
            // Consider using rsqrt() for approximation if precision is acceptable
            // float dst = rsqrt(sqrDstToNeighbour) * sqrDstToNeighbour;
            density += DensityKernel(dst, smoothingRadius);
            nearDensity += NearDensityKernel(dst, smoothingRadius);
        }
    }

    return float2(density, nearDensity);
}

float PressureFromDensity(float density)
{
    return (density - targetDensity) * pressureMultiplier;
}

float NearPressureFromDensity(float nearDensity)
{
    return nearPressureMultiplier * nearDensity;
}

// --- Optimized ExternalForces ---
float2 ExternalForces(float2 pos, float2 velocity)
{
    // Gravity
    float2 gravityAccel = float2(0, gravity);

    // Input interactions modify gravity
    if (interactionInputStrength != 0)
    {
        float2 inputPointOffset = interactionInputPoint - pos;
        float sqrDst = dot(inputPointOffset, inputPointOffset);
        if (sqrDst < interactionInputRadius * interactionInputRadius)
        {
            float dst = sqrt(sqrDst);
            // Consider using rsqrt() for approximation if precision is acceptable
            // float dst = rsqrt(sqrDst) * sqrDst;
            float edgeT = (dst / interactionInputRadius);
            float centreT = 1 - edgeT;
            // Normalize only if dst > 0 to avoid division by zero
            float2 dirToCentre = dst > 0 ? inputPointOffset / dst : float2(0,0);

            float gravityWeight = 1 - (centreT * saturate(interactionInputStrength / 10));
            float2 accel = gravityAccel * gravityWeight + dirToCentre * centreT * interactionInputStrength;
            accel -= velocity * centreT;
            return accel;
        }
    }

    return gravityAccel;
}

// --- Optimized HandleBoxCollision ---
void HandleBoxCollision(inout float2 pos, inout float2 vel, OrientedBox box)
{
    // Precompute for local space transformation
    float2 right = box.zLocal;
    float2 up = float2(-box.zLocal.y, box.zLocal.x); 
    float2 boxHalfSize = box.size * 0.5;

    // Combined transformation to local space
    float2 localPos = pos - box.pos;
    float2 rotatedPos = float2(dot(localPos, right), dot(localPos, up));

    // Early exit if no collision
    float2 distanceFromCenter = abs(rotatedPos);
    float2 penetration = distanceFromCenter - boxHalfSize;

    if (penetration.x >= 0 || penetration.y >= 0)
        return;

    // Transform velocity to local space only if collision is detected
    float2 localVel = float2(dot(vel, right), dot(vel, up));

    // Branchless axis selection and penetration handling
    bool useXAxis = penetration.x > penetration.y;
    float sign = useXAxis ? (rotatedPos.x > 0 ? 1 : -1) : (rotatedPos.y > 0 ? 1 : -1);

    // Branchless position and velocity update
    rotatedPos = useXAxis ?
        float2(boxHalfSize.x * sign, rotatedPos.y) :
        float2(rotatedPos.x, boxHalfSize.y * sign);

    localVel = useXAxis ?
        float2(-localVel.x * collisionDamping, localVel.y) :
        float2(localVel.x, -localVel.y * collisionDamping);

    // Transform back to world space
    pos = box.pos + right * rotatedPos.x + up * rotatedPos.y;
    vel = right * localVel.x + up * localVel.y;
}

// --- Optimized HandleCollisions ---
void HandleCollisions(uint particleIndex)
{
    float2 pos = Positions[particleIndex];
    float2 vel = Velocities[particleIndex];

    // Keep particle inside bounds using branchless approach
    const float2 halfSize = boundsSize * 0.5;
    float2 edgeDst = halfSize - abs(pos);

    // Branchless update of position and velocity
    pos.x = (edgeDst.x <= 0) ? halfSize.x * sign(pos.x) : pos.x;
    vel.x = (edgeDst.x <= 0) ? -vel.x * collisionDamping : vel.x;
    pos.y = (edgeDst.y <= 0) ? halfSize.y * sign(pos.y) : pos.y;
    vel.y = (edgeDst.y <= 0) ? -vel.y * collisionDamping : vel.y;

    // Handle box collisions
    for (int i = 0; i < numBoxColliders; i++)
    {
        HandleBoxCollision(pos, vel, BoxColliders[i]);
    }

    // Update position and velocity
    Positions[particleIndex] = pos;
    Velocities[particleIndex] = vel;
}

[numthreads(NumThreads, 1, 1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    // External forces (gravity and input interaction)
    Velocities[id.x] += ExternalForces(Positions[id.x], Velocities[id.x]) * deltaTime;

    // Predict
    const float predictionFactor = 1 / 120.0; // Consider making this a constant if it doesn't change
    PredictedPositions[id.x] = Positions[id.x] + Velocities[id.x] * predictionFactor;
}

[numthreads(NumThreads, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    // Reset offsets (only needed once, consider moving to a separate kernel or doing it on the CPU)
    SpatialOffsets[id.x] = numParticles;

    // Update index buffer
    uint index = id.x;
    int2 cell = GetCell2D(PredictedPositions[index], smoothingRadius);
    uint hash = HashCell2D(cell);
    uint key = KeyFromHash(hash, numParticles);
    SpatialIndices[id.x] = uint3(index, hash, key);
}

[numthreads(NumThreads, 1, 1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    float2 pos = PredictedPositions[id.x];
    Densities[id.x] = CalculateDensity(pos);
}

[numthreads(NumThreads, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    float density = Densities[id.x][0];
    float densityNear = Densities[id.x][1];
    float pressure = PressureFromDensity(density);
    float nearPressure = NearPressureFromDensity(densityNear);
    float2 pressureForce = 0;

    float2 pos = PredictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    // Neighbour search with unrolling and early exits
    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        for (; currIndex < numParticles; currIndex++)
        {
            uint3 indexData = SpatialIndices[currIndex];

            // Combine conditions for fewer branches
            if (indexData[2] != key || indexData[1] != hash || indexData[0] == id.x)
            {
                if (indexData[2] != key) break; // Exit outer loop early
                continue;
            }

            uint neighbourIndex = indexData[0];
            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            // Skip if not within radius
            if (sqrDstToNeighbour > sqrRadius) continue;

            // Calculate pressure force
            float dst = sqrt(sqrDstToNeighbour);
            // Consider using rsqrt() for approximation if precision is acceptable
            // float dst = rsqrt(sqrDstToNeighbour) * sqrDstToNeighbour;
            // Use a small epsilon to avoid division by zero when particles overlap
            float2 dirToNeighbour = dst > 1e-6 ? offsetToNeighbour / dst : float2(0, 1);

            float neighbourDensity = Densities[neighbourIndex][0];
            float neighbourNearDensity = Densities[neighbourIndex][1];
            float neighbourPressure = PressureFromDensity(neighbourDensity);
            float neighbourNearPressure = NearPressureFromDensity(neighbourNearDensity);

            // Precalculate shared pressures
            float sharedPressure = (pressure + neighbourPressure) * 0.5;
            float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

            // Accumulate pressure force with fewer operations
            pressureForce += dirToNeighbour * (DensityDerivative(dst, smoothingRadius) * sharedPressure / neighbourDensity + NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / neighbourNearDensity);
        }
    }

    // Update velocity
    Velocities[id.x] += pressureForce / density * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void CalculateViscosity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    float2 pos = PredictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    float2 viscosityForce = 0;
    float2 velocity = Velocities[id.x];

    // Neighbour search with unrolling and early exits
    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        for (; currIndex < numParticles; currIndex++)
        {
            uint3 indexData = SpatialIndices[currIndex];

            // Combine conditions for fewer branches
            if (indexData[2] != key || indexData[1] != hash || indexData[0] == id.x)
            {
                if (indexData[2] != key) break; // Exit outer loop early
                continue;
            }

            uint neighbourIndex = indexData[0];
            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            // Skip if not within radius
            if (sqrDstToNeighbour > sqrRadius) continue;

            float dst = sqrt(sqrDstToNeighbour);
            // Consider using rsqrt() for approximation if precision is acceptable
            // float dst = rsqrt(sqrDstToNeighbour) * sqrDstToNeighbour;
            float2 neighbourVelocity = Velocities[neighbourIndex];
            viscosityForce += (neighbourVelocity - velocity) * ViscosityKernel(dst, smoothingRadius);
        }
    }

    // Update velocity
    Velocities[id.x] += viscosityForce * viscosityStrength * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    Positions[id.x] += Velocities[id.x] * deltaTime;
    HandleCollisions(id.x);
}